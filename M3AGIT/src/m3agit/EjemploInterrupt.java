/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package m3agit;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.Timer;

/**
 *
 * @author 4lej4
 */
public class EjemploInterrupt extends javax.swing.JFrame {
private Timer timer; // Objeto Timer para actualizar el tiempo
private long startTime;
private long tiempoTranscurrido;
private Thread cronometroThread; 
    /**
     * Creates new form EjemploInterrupt
     */
    public EjemploInterrupt() {
        initComponents();
        getContentPane().setBackground(new Color(0x2B2B2B));
        this.setLocationRelativeTo(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tiempo = new javax.swing.JLabel();
        iniciar = new javax.swing.JButton();
        detener = new javax.swing.JButton();
        reiniciar = new javax.swing.JButton();
        nodetener = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(102, 102, 102));

        tiempo.setFont(new java.awt.Font("Impact", 0, 40)); // NOI18N
        tiempo.setForeground(new java.awt.Color(255, 204, 204));
        tiempo.setToolTipText("");
        tiempo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        iniciar.setBackground(new java.awt.Color(255, 204, 204));
        iniciar.setForeground(new java.awt.Color(43, 43, 43));
        iniciar.setText("Iniciar");
        iniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iniciarActionPerformed(evt);
            }
        });

        detener.setBackground(new java.awt.Color(255, 204, 204));
        detener.setForeground(new java.awt.Color(43, 43, 43));
        detener.setText("Detener");
        detener.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detenerActionPerformed(evt);
            }
        });

        reiniciar.setBackground(new java.awt.Color(255, 204, 204));
        reiniciar.setForeground(new java.awt.Color(43, 43, 43));
        reiniciar.setText("Reiniciar");
        reiniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reiniciarActionPerformed(evt);
            }
        });

        nodetener.setBackground(new java.awt.Color(255, 204, 204));
        nodetener.setForeground(new java.awt.Color(43, 43, 43));
        nodetener.setText("Reanudar");
        nodetener.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nodetenerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(74, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tiempo, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(iniciar, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nodetener)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(detener, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(reiniciar)))))
                .addGap(46, 46, 46))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(81, 81, 81)
                .addComponent(tiempo, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 99, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(iniciar)
                    .addComponent(detener)
                    .addComponent(reiniciar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nodetener)
                .addGap(12, 12, 12))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void iniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iniciarActionPerformed
       startTime = System.currentTimeMillis(); // Guarda el tiempo de inicio
    cronometroThread = new Thread(new Runnable() {
        @Override
        public void run() {
            while (!Thread.interrupted() && !Thread.currentThread().isInterrupted()) {
                actualizarTiempo();
                try {
                    Thread.sleep(10); // Espera 10 milisegundos antes de actualizar el tiempo
                } catch (InterruptedException ex) {
                    Thread.currentThread().interrupt(); // Restaura la bandera de interrupción
                }
            }
            System.out.println("Cronómetro detenido");
        }
    });
    cronometroThread.start();
    }//GEN-LAST:event_iniciarActionPerformed

    private void detenerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detenerActionPerformed
        if (cronometroThread != null && cronometroThread.isAlive()) {
        cronometroThread.interrupt(); // Interrumpe el hilo del cronómetro
        tiempoTranscurrido = System.currentTimeMillis() - startTime; // Guarda el tiempo transcurrido
    }
    }//GEN-LAST:event_detenerActionPerformed

    private void reiniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reiniciarActionPerformed
         if (cronometroThread != null && cronometroThread.isAlive()) {
        cronometroThread.interrupt(); // Interrumpe el hilo del cronómetro
    }
    
    tiempoTranscurrido = 0; // Reinicia el tiempo transcurrido a cero
    tiempo.setText("00:00:00:000");
    }//GEN-LAST:event_reiniciarActionPerformed

    private void nodetenerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nodetenerActionPerformed
      if (cronometroThread != null && cronometroThread.isAlive()) {
        cronometroThread.interrupt(); // Interrumpe el hilo del cronómetro
        reiniciarCronometro();
    } else {
        reiniciarCronometro();
        startTime = System.currentTimeMillis(); // Guarda el nuevo tiempo de inicio
    }
    }//GEN-LAST:event_nodetenerActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EjemploInterrupt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EjemploInterrupt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EjemploInterrupt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EjemploInterrupt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EjemploInterrupt().setVisible(true);
            }
        });
    }
    private void actualizarTiempo() {
    long elapsedTime = System.currentTimeMillis() - startTime;
    long milisegundos = elapsedTime % 1000;
    long segundos = (elapsedTime / 1000) % 60;
    long minutos = (elapsedTime / (1000 * 60)) % 60;
    long horas = (elapsedTime / (1000 * 60 * 60)) % 24;

    // Formatea el tiempo en HH:mm:ss:SSS
    String tiempoFormateado = String.format("%02d:%02d:%02d:%03d", horas, minutos, segundos, milisegundos);

    tiempo.setText(tiempoFormateado); // Actualiza el JLabel con el tiempo transcurrido
}
 private void reiniciarCronometro() {
    cronometroThread = new Thread(new Runnable() {
        @Override
        public void run() {
            while (!Thread.interrupted() && !Thread.currentThread().isInterrupted()) {
                long elapsedTime = System.currentTimeMillis() - startTime + tiempoTranscurrido;
                long milisegundos = elapsedTime % 1000;
                long segundos = (elapsedTime / 1000) % 60;
                long minutos = (elapsedTime / (1000 * 60)) % 60;
                long horas = (elapsedTime / (1000 * 60 * 60)) % 24;

                // Formatea el tiempo en HH:mm:ss:SSS
                String tiempoFormateado = String.format("%02d:%02d:%02d:%03d", horas, minutos, segundos, milisegundos);

                tiempo.setText(tiempoFormateado); // Actualiza el JLabel con el tiempo transcurrido

                try {
                    Thread.sleep(10); // Espera 10 milisegundos antes de actualizar el tiempo
                } catch (InterruptedException ex) {
                    Thread.currentThread().interrupt(); // Restaura la bandera de interrupción
                }
            }
            System.out.println("Cronómetro detenido");
        }
    });
    cronometroThread.start();}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton detener;
    private javax.swing.JButton iniciar;
    private javax.swing.JButton nodetener;
    private javax.swing.JButton reiniciar;
    private javax.swing.JLabel tiempo;
    // End of variables declaration//GEN-END:variables
}
